#!/usr/bin/env python
###### Author           Skipper.D
###### DESCRIPTION      Minion runs on Tomcat srv
###### VERSION          v1.3
###### UPDATE           2015/11/30
###### PYTHON VERSION   2
import os
import sys
import glob
import re
import time
import subprocess

def _start_tomcat(tomcatHome):
    tomcatHome = os.path.normpath(tomcatHome)
    keyword = os.path.basename(tomcatHome)
    
    pids = _get_pid(keyword)
    print "---",pids,"---"
    # Tomcat process exists, kill first
    if len(pids) != 0:
        pid = pids[0]
        print "---",pid,"---"
        cmd = "source /etc/profile;/bin/kill -9 {0} &> /dev/null".format(pid)
        os.system(cmd)
        time.sleep(2)
    cmd = "source /etc/profile;{0}/bin/startup.sh &> /dev/null".format(tomcatHome)
    return subprocess.call(cmd,shell=True)


def _stop_tomcat(tomcatHome):
    tomcatHome = os.path.normpath(tomcatHome)
    STOP_BIN = tomcatHome+"/bin/shutdown.sh"
    keyword = os.path.basename(tomcatHome)

    pids = _get_pid(keyword)
    # No tomcat process
    if len(pids) == 0:
        #return "NO TOMCAT RUNNING"
        return "0"
    else:
        pid = pids[0]
        cmd = "source /etc/profile;{0} &> /dev/null".format(STOP_BIN)
        stat = subprocess.call(cmd,shell=True)

        # PID still exists, kill it
        time.sleep(3)
        cmd = "source /etc/profile;/bin/kill -9 {0} &> /dev/null".format(pid)
        subprocess.call(cmd,shell=True)
        
        return "0" 


def _reboot_tomcat(tomcatHome):
    _stop_tomcat(tomcatHome)
    return _start_tomcat(tomcatHome)

#______ Backup specified app in <tomcat home>/backup
def _backup(tomcatHome,appName):
    tomcatHome = os.path.normpath(tomcatHome)
    BACKUP_DIR = tomcatHome+"/backup"
    APP_DIR = tomcatHome+"/webapps"
    timestamp = time.strftime("%Y-%m-%d.%H-%M", time.localtime())
    backupFile = "{0}/{1}.{2}.tar.gz".format(BACKUP_DIR,appName,timestamp)
    dstFile = "{0}/webapps/{1}".format(tomcatHome,appName)

    if not os.path.exists(BACKUP_DIR):
        os.mkdir(BACKUP_DIR)
    
    cmd = "tar -Pzcf {0} {1}".format(backupFile,dstFile)
    return subprocess.call(cmd,shell=True)


def _restore(backupFile):
    cmd = "tar -Pzxf {0} &> /dev/null".format(backupFile)
    return subprocess.call(cmd,shell=True)

# +----------------------------------------------------+
# | Return backcup files ordered by modification time. |
# | No backup file return 0                            |     
# +----------------------------------------------------+
def _list_backup(tomcatHome):
    tomcatHome = os.path.normpath(tomcatHome)
    BACKUP_DIR = tomcatHome+"/backup"
    cmd = "ls -t1 {0} 2> /dev/null".format(BACKUP_DIR)
    pipe = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout
    
    fileList = pipe.readlines()
    
    if len(fileList) > 0:
        for f in fileList: 
            print os.path.join(BACKUP_DIR,f.strip())
    else:
        print 0
    
    

#______ Return pids list
def _get_pid(key):
    pids = []    
    keyword = key
    self_pid = os.getpid() 
    os.chdir('/proc')
    tmp_pids = glob.glob('[0-9]*')
    for p in tmp_pids:
        try:
            with open(p+'/cmdline','r') as tmp:
                cmd = tmp.readline()
                if re.search(keyword,cmd) and (not re.search('python',cmd)) and p != str(self_pid):
                    pids.append(p)
        except IOError:
           print "OPEN PROC ERROR :/"
           exit(1)
    print "===",pids,"==="
    return pids


if __name__ == "__main__":

    args = sys.argv

    if len(args) == 3:
        cmd = args[1].upper()
        
        if os.path.exists(args[2]):

            if cmd == "START":
                print _start_tomcat(args[2])
                exit(0)
            if cmd == "STOP":
                print _stop_tomcat(args[2])
                exit(0)
            if cmd == "REBOOT":
                print _reboot_tomcat(args[2])
                exit(0)
            if cmd == "LIST":
                _list_backup(args[2])
                exit(0)
            if cmd == "RESTORE":
                print _restore(args[2])
                exit(0)
        else:
            print "TOMCAT NOT FOUND"
            exit(1)

    if len(args) == 4:
        cmd = args[1].upper()
        if cmd == "BACKUP":
            tomcatHome = args[2]
            normalPath = os.path.normpath(tomcatHome)
            if os.path.exists(normalPath):
                appName = args[3]
                print _backup(normalPath,appName)
                exit(0)
            else:
                print "TOMCAT NOT FOUND"
                exit(1)

    print "MINION ERR"
    exit(1)

